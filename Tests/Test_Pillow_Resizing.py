
import unittest

from PIL import Image


pre_scale_bw = [
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255,  76, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 149, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 105, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 225, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 105, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 149, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255,  76, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,  76, 255, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 149, 255, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 105, 255, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 225, 255],
		[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0],
	]


simg_expect = [
				0,   255, 255, 255, 255, 255, 255, 255, 255, 255,
				255, 149, 255, 255, 255, 255, 255, 255, 255, 255,
				255, 255,   0, 255, 255, 255, 255, 255, 255, 255,
				255, 255, 255,   0, 255, 255, 255, 255, 255, 255,
				255, 255, 255, 255, 149, 255, 255, 255, 255, 255,
				255, 255, 255, 255, 255,   0, 255, 255, 255, 255,
				255, 255, 255, 255, 255, 255,   0, 255, 255, 255,
				255, 255, 255, 255, 255, 255, 255, 149, 255, 255,
				255, 255, 255, 255, 255, 255, 255, 255,   0, 255,
				255, 255, 255, 255, 255, 255, 255, 255, 255,   0

			]


class TestSequenceFunctions(unittest.TestCase):

	def test_image_rescale_1(self):
		img_dims = 20
		simg_dims = 10
		img = Image.new( 'L', (img_dims, img_dims))
		pix = img.load()

		for y_idx, pxlist in enumerate(pre_scale_bw):
			for x_idx, pixval in enumerate(pxlist):
				pix[y_idx, x_idx] = pixval


		img_l = list(img.getdata())

		# getdata results in a flat list, so flatten the input
		flat_l = [tmp for row in pre_scale_bw for tmp in row]

		# Check the image loaded OK
		self.assertEqual(img_l, flat_l)

		# Do the resize
		simg = img.resize((simg_dims, simg_dims), Image.NEAREST)

		# Check the resize resulted in the expected output
		simg_pix = list(simg.getdata())
		self.assertEqual(simg_pix, simg_expect)


if __name__ == '__main__':
	unittest.main()
